
ifndef PKG_BUILD_DIR
PKG_BUILD_DIR = src
endif

ifndef ROOTFSDIR
ROOTFSDIR=/tmp/${USER}-rootfs
endif 

#wangyu add MACRO for apv6
ifeq ($(BOARD_TYPE), amcc)
CROSS=powerpc-apm-linux-gnu
else ifeq ($(BOARD_TYPE), armada370)
CROSS=arm-marvell-linux-gnueabi
else
CROSS=mips-linux-uclibc
endif
#wangyu add end
CC=${CROSS}-gcc

#TOOLCHAIN_ABI_64=y

ifdef TOOLCHAIN_ABI_N32
  export TOOLCHAIN_ABI=-mabi=n32
  export LDFLAGS=-melf32btsmipn32
  export LIBDIR=/usr/lib32
endif

ifdef TOOLCHAIN_ABI_64
  export TOOLCHAIN_ABI=-mabi=64
  export LDFLAGS=-melf64btsmip
  export LIBDIR=/usr/lib64
endif

#OCTEON_ROOT ?= ${TOPDIR}/ap83sdk/build
OCTEON_ROOT ?= ${TOPDIR}/build
ROOTFSDIR ?= /home/shark/builddir/rootfs
#file name and path declare
PKG := libmxml 
VERSION := 0.9.1
PKG_NAME := $(PKG)-$(VERSION)
PKG_BUILD_DIR:=src

#ifeq ($(BOARD_TYPE),db12x) wangyu change
ifeq ($(BOARD_TYPE),db12x)
CAVIUM_CPPFLAGS ?= -I$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/sys-include
CAVIUM_LDFLAGS ?= -L$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/lib/
PKG_INSTALL_DIR := $(shell pwd)/$(PKG_BUILD_DIR)/ipkg-install/$(PKG)
SSL_DIR := $(ROOTFSDIR)/../autelan/openssl/src
ZLIB_DIR := $(ROOTFSDIR)/../autelan/zlib-1.2.3/src
GSSAPI_DIR := $(ROOTFSIDR)/../autelan/source/libgssapi/libgssapi-0.11/ipkg-install
else
ifeq ($(BOARD_TYPE),amcc)
#CAVIUM_CPPFLAGS ?= -I$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/sys-include
#CAVIUM_LDFLAGS ?= -L$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/lib/
PKG_INSTALL_DIR := $(shell pwd)/$(PKG_BUILD_DIR)/ipkg-install/$(PKG)
SSL_DIR := $(ROOTFSDIR)/../autelan/openssl/src
ZLIB_DIR := $(ROOTFSDIR)/../autelan/zlib-1.2.3/src
GSSAPI_DIR := $(ROOTFSIDR)/../autelan/source/libgssapi/libgssapi-0.11/ipkg-install
else
ifeq ($(BOARD_TYPE),armada370)
#CAVIUM_CPPFLAGS ?= -I$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/sys-include
#CAVIUM_LDFLAGS ?= -L$(OCTEON_ROOT)/gcc-4.3.3/build_mips/staging_dir/usr/mips-linux-uclibc/lib/
PKG_INSTALL_DIR := $(shell pwd)/$(PKG_BUILD_DIR)/ipkg-install/$(PKG)
SSL_DIR := $(ROOTFSDIR)/../autelan/openssl/src
ZLIB_DIR := $(ROOTFSDIR)/../autelan/zlib-1.2.3/src
GSSAPI_DIR := $(ROOTFSIDR)/../autelan/source/libgssapi/libgssapi-0.11/ipkg-install
else
CAVIUM_CPPFLAGS ?= -I$(OCTEON_ROOT)/gcc-3.4.4-2.16.1/build_mips_nofpu/mips-linux-uclibc/sys-include
CAVIUM_LDFLAGS ?= -L$(OCTEON_ROOT)/gcc-3.4.4-2.16.1/build_mips_nofpu/mips-linux-uclibc/lib
PKG_INSTALL_DIR := $(shell pwd)/$(PKG_BUILD_DIR)/ipkg-install/$(PKG)
SSL_DIR := $(ROOTFSDIR)/../openssl/src
ZLIB_DIR := $(ROOTFSDIR)/../zlib-1.2.3
GSSAPI_DIR := $(ROOTFSIDR)/../source/libgssapi/libgssapi-0.11/ipkg-install
endif
endif
endif
EXTRA_CPPFLAGS := -I$(SSL_DIR)/include -I$(ZLIB_DIR)
EXTRA_LDFLAGS := -L$(SSL_DIR) -lssl -lcrypto -L$(ZLIB_DIR) -lz

#command replace
CPDIR := cp -r
CP := cp -fpR
MKDIR := mkdir -p
MV := mv

#configure option
FPIC := -fPIC
#wangyu add MACRO for apv6
ifeq ($(BOARD_TYPE), amcc)
TARGET_CROSS ?= powerpc-apm-linux-gnu-
else ifeq ($(BOARD_TYPE), armada370)
TARGET_CROSS ?= arm-marvell-linux-gnueabi-
else
TARGET_CROSS ?= mips-linux-uclibc-
endif
#wangyu add end
TARGET_CC ?= $(TARGET_CROSS)gcc
TARGET_CPPFLAGS ?= $(CAVIUM_CPPFLAGS)
TARGET_LDFLAGS ?= $(CAVIUM_LDFLAGS)
CPPFLSGS = $(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)
LDFLAGS = $(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)
#wangyu add MACRO for apv6
ifeq ($(BOARD_TYPE), amcc)
GNU_TARGET_NAME ?= powerpc-apm-linux
else ifeq ($(BOARD_TYPE), armada370)
GNU_TARGET_NAME ?= arm-linux
else
GNU_TARGET_NAME ?= mips-linux
endif
#wangyu add end
DISABLE_NLS ?= --disable-nls
TARGET_CONFIGURE_OPTS ?= \
  AR=$(TARGET_CROSS)ar \
  AS="$(TARGET_CC) -c $(TARGET_CFLAGS)" \
  LD=$(TARGET_CROSS)ld \
  NM=$(TARGET_CROSS)nm \
  CC="$(TARGET_CC)" \
  GCC="$(TARGET_CC)" \
  CXX=$(TARGET_CROSS)g++ \
  RANLIB=$(TARGET_CROSS)ranlib \
  STRIP=$(TARGET_CROSS)strip \
  OBJCOPY=$(TARGET_CROSS)objcopy \
  OBJDUMP=$(TARGET_CROSS)objdump \
  SIZE=$(TARGET_CROSS)size

CONFIGURE_VARS = \
                $(TARGET_CONFIGURE_OPTS) \
                CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
                CXXFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
		CPPFLAGS="$(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)" \
                LDFLAGS="$(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)" \

CONFIGURE_ARGS = \
                --target=$(GNU_TARGET_NAME) \
                --host=$(GNU_TARGET_NAME) \
                --build=$(GNU_HOST_NAME) \
                --program-prefix="" \
                --program-suffix="" \
                --prefix=/usr \
                --exec-prefix=/usr \
                --bindir=/usr/bin \
                --sbindir=/usr/sbin \
                --libexecdir=/usr/lib \
                --sysconfdir=/etc \
                --datadir=/usr/share \
                --localstatedir=/var \
                --mandir=/usr/man \
                --infodir=/usr/info 

#CONFIGURE_ARGS = \
                --target=$(GNU_TARGET_NAME) \
                --host=$(GNU_TARGET_NAME) \
                --build=$(GNU_HOST_NAME) \
                --program-prefix="" \
                --program-suffix="" \
                --prefix=/home/blackdragon/pc018/build/gcc-4.3.3/build_mips/staging_dir/usr/bin \
                --exec-prefix=/usr \
                --bindir=/usr/bin \
                --sbindir=/usr/sbin \
                --libexecdir=/usr/lib \
                --sysconfdir=/etc \
                --datadir=/usr/share \
                --localstatedir=/var \
                --mandir=/usr/man \
                --infodir=/usr/info 
MAKE_FLAGS = \
                $(TARGET_CONFIGURE_OPTS) \
                CROSS="$(TARGET_CROSS)" \
                ARCH="$(ARCH)"
MAKE_VARS = \
                CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
                CPPFLAGS="$(TARGET_CPPFALGS) $(EXTRA_CPPFLAGS)" \
                CXXFLAGS="$(TARGET_CFALGS) $(EXTAR_CFLAGS)" \
                LDFLAGS="$(TARGET_CFLAGS) $(EXTRA_LDFLAGS)"


.PHONY: all
all: configure compile install

.PHONY: configure
configure:
	( cd $(PKG_BUILD_DIR) && \
	  aclocal-1.7 && automake-1.7 --add-missing && \
	  $(CONFIGURE_VARS) \
	  ./configure \
	  $(CONFIGURE_ARGS); \
	); \

.PHONY: compile
compile:
	$(MAKE) -C $(PKG_BUILD_DIR) PREFIX=${ROOTFSDIR}/usr CC="$(CC)" CFLAGS="$(TOOLCHAIN_ABI)" LDFLAGS="$(TOOLCHAIN_ABI)" STRIPFLAGS="$(TOOLCHAIN_ABI) -Wl,-s"



.PHONY: install
install:

.PHONY: clean
clean:
	$(MAKE) -C $(PKG_BUILD_DIR) clean




