OCTEON_ROOT := /home/shark/cavium
ROOTFSDIR := /home/shark/builddir/rootfs
#file name and path declare
PKG := haserl 
VERSION := 0.9.24
PKG_NAME := $(PKG)-$(VERSION)
#PKG_BUILD_DIR := $(PKG_NAME)
PKG_BUILD_DIR:=src

CAVIUM_CPPFLAGS ?= -I$(OCTEON_ROOT)/tools/mips64-octeon-linux-gnu/sys-root/usr/include
CAVIUM_LDFLAGS ?= -L$(OCTEON_ROOT)/tools/mips64-octeon-linux-gnu/sys-root/usr/lib64
PKG_INSTALL_DIR := $(shell pwd)/$(PKG_BUILD_DIR)/ipkg-install/$(PKG)

#command replace
CPDIR := sudo cp -r 
CP := sudo cp -fpR
MKDIR := mkdir -p
MV := sudo mv

ifndef PKG_BUILD_DIR
PKG_BUILD_DIR = src
endif

ifndef ROOTFSDIR
ROOTFSDIR=/tmp/${USER}-rootfs
endif

CROSS=mips64-octeon-linux-gnu
CC=${CROSS}-gcc

TOOLCHAIN_ABI_64=y

ifdef TOOLCHAIN_ABI_N32
  export TOOLCHAIN_ABI=-mabi=n32
  export LDFLAGS=-melf32btsmipn32
  export LIBDIR=/usr/lib32
endif

ifdef TOOLCHAIN_ABI_64
  export TOOLCHAIN_ABI=-mabi=64
  export LDFLAGS=-melf64btsmip
  export LIBDIR=/usr/lib64
endif

ifdef TOOLCHAIN_UCLIBC
  export TOOLCHAIN_ABI=-muclibc
  export LDFLAGS=-melf32btsmipn32
  export LIBDIR=/uclibc/usr/lib
endif


#configure option
FPIC := -fPIC
TARGET_CROSS ?= mips64-octeon-linux-gnu-
TARGET_CC ?= $(TARGET_CROSS)gcc
TARGET_CFLAGS = 
EXTRA_CFLAGS = 
TARGET_CPPFLAGS = $(CAVIUM_CPPFLAGS) 
EXTRA_CPPFLAGS = 
TARGET_LDFLAGS = $(CAVIUM_LDFLAGS)
EXTRA_LDFLAGS = 
GNU_TARGET_NAME ?= mips-linux
DISABLE_NLS ?= --disable-nls 
TARGET_CONFIGURE_OPTS ?= \
  AR=$(TARGET_CROSS)ar \
  AS="$(TARGET_CC) -c $(TARGET_CFLAGS)" \
  LD=$(TARGET_CROSS)ld \
  NM=$(TARGET_CROSS)nm \
  CC="$(TARGET_CC)" \
  GCC="$(TARGET_CC)" \
  CXX=$(TARGET_CROSS)g++ \
  RANLIB=$(TARGET_CROSS)ranlib \
  STRIP=$(TARGET_CROSS)strip \
  OBJCOPY=$(TARGET_CROSS)objcopy \
  OBJDUMP=$(TARGET_CROSS)objdump \
  SIZE=$(TARGET_CROSS)size

CONFIGURE_VARS = \
                $(TARGET_CONFIGURE_OPTS) \
                CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
                CXXFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
                CPPFLAGS="$(TARGET_CPPFLAGS) $(EXTRA_CPPFLAGS)" \
                LDFLAGS="$(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)" \
			
CONFIGURE_ARGS = \
                --target=$(GNU_TARGET_NAME) \
                --host=$(GNU_TARGET_NAME) \
                --build=$(GNU_HOST_NAME) \
                --program-prefix="" \
                --program-suffix="" \
                --prefix=/usr \
                --exec-prefix=/usr \
                --bindir=/usr/bin \
                --sbindir=/usr/sbin \
                --libexecdir=/usr/lib \
                --sysconfdir=/etc \
                --datadir=/usr/share \
                --localstatedir=/var \
                --mandir=/usr/man \
                --infodir=/usr/info \

MAKE_FLAGS = \
		$(TARGET_CONFIGURE_OPTS) \
		CROSS="$(TARGET_CROSS)" \
		ARCH="$(ARCH)"
MAKE_VARS = \
		CFLAGS="$(TARGET_CFLAGS) $(EXTRA_CFLAGS)" \
		CPPFLAGS="$(TARGET_CPPFALGS) $(EXTRA_CPPFLAGS)" \
 		CXXFLAGS="$(TARGET_CFALGS) $(EXTAR_CFLAGS)" \
		LDFLAGS="$(TARGET_LDFLAGS) $(EXTRA_LDFLAGS)"

.PHONY: all
all: configure compile install 

.PHONY: configure
configure:
	( cd $(PKG_BUILD_DIR) && \
	  $(CONFIGURE_VARS) \
	  ./configure \
	  $(CONFIGURE_ARGS); \
	); \

.PHONY: compile
compile:
	${MAKE} -C ${PKG_BUILD_DIR} PREFIX=${ROOTFSDIR}/usr CC="${CC}" CFLAGS="${TOOLCHAIN_ABI}" LDFLAGS="${TOOLCHAIN_ABI}" STRIPFLAGS="${TOOLCHAIN_ABI} -Wl,-s" 

.PHNOY: install
install:
	sudo cp -f ${PKG_BUILD_DIR}/src/haserl ${ROOTFSDIR}/usr/bin

.PHONY: clean
clean:
	$(MAKE) -C $(PKG_BUILD_DIR) clean
