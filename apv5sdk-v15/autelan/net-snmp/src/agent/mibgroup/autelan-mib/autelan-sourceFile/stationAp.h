/**********************************************************************************
* Copyright (c) 2008-2011  Beijing Autelan Technology Co. Ltd.
* All rights reserved.
*
* filename: stationAp.h
* description:  implementation for the header file of stationAp.c
* 
*
* 
************************************************************************************/

/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf 14476 2006-04-18 17:36:51Z hardaker $
 */
#ifndef STATIONAp_H
#define STATIONAP_H


#include "../ieee802dot11.h"
//#include "wapi/wapiPwlanAp.c" hyh test

#define SNMP_STR_LEN      128

#ifndef   MACADDR_LEN   
#define   MACADDR_LEN   ( 6 * 2 ) + 5
#endif

#ifndef   STR_BUF   
#define   STR_BUF     256
#endif



#define AC_UID_LEN        IFINDEX_LEN  
#define SE_UID_LEN        IFINDEX_LEN  
#define AS_UID_LEN        IFINDEX_LEN
#define CF_UID_LEN        IFINDEX_LEN
#define AT_UID_LEN        IFINDEX_LEN

#define  AP_FILTER_1_MAC_INDEX_LEN    4
#define  AP_FILTER_2_MAC_INDEX_LEN    4
#define  AP_FILTER_3_MAC_INDEX_LEN    4
#define  AP_FILTER_4_MAC_INDEX_LEN    4


#define AP_CLIENT_ADDRESS_INDEX_LEN       4
#define AP_CLIENT_TXSEQ_INDEX_LEN         4
#define AP_CLIENT_RXSEQ_INDEX_LEN         4
#define AP_CLIENT_UPTIME_INDEX_LEN        4
#define AP_CLIENT_NTP_INDEX_LEN           4
#define AP_CLIENT_TXRATE_INDEX_LEN        4
#define AP_CLIENT_RXRATE_INDEX_LEN        4
#define AP_CLIENT_DNS_INDEX_LEN           4
#define  AP_CLIENT_TRAFFIC_INDEX_LEN     4
#define  AP_CLIENT_RXPOWER_INDEX_LEN     4

#define AD_UID_LEN       IFINDEX_LEN + AP_CLIENT_ADDRESS_INDEX_LEN
#define TX_UID_LEN       IFINDEX_LEN + AP_CLIENT_TXSEQ_INDEX_LEN
#define RX_UID_LEN       IFINDEX_LEN + AP_CLIENT_RXSEQ_INDEX_LEN
#define UP_UID_LEN       IFINDEX_LEN + AP_CLIENT_UPTIME_INDEX_LEN
#define AN_UID_LEN       IFINDEX_LEN + AP_CLIENT_NTP_INDEX_LEN
#define AR_UID_LEN       IFINDEX_LEN + AP_CLIENT_TXRATE_INDEX_LEN
#define CR_UID_LEN       IFINDEX_LEN + AP_CLIENT_RXRATE_INDEX_LEN
#define DN_UID_LEN       IFINDEX_LEN + AP_CLIENT_DNS_INDEX_LEN
#define  RP_UID_LEN       IFINDEX_LEN + AP_CLIENT_RXPOWER_INDEX_LEN
#define TR_UID_LEN       IFINDEX_LEN + AP_CLIENT_TRAFFIC_INDEX_LEN
static long wepCurrentKey;
static long haveWepCurrentKey;
static struct wepTbl_data  wep[4];

static struct acTbl_data {

   char  UID        [ AC_UID_LEN + 1 ];               // unique ID
   char  ifName     [ IFNAME_LEN + 1 ];               // ifName of card

   long  ifIndex; 
   long SSIDEnabled;
   long SSIDHidden;
   long StaIsolate;
   long EAPAuthenSupport;
   long apMaxSimultUsers;
   long apBGmode;
   long apConnectUsers;
   long UsrReqJoinCount;
   long apRespUserCount;
   long UsrJoinSucCount;
   long apUsrTotalTime;
   char ap80211stats[2048];
   char apUtilResource[32];
   char vapFlag[ 128 ];
   char vapTraffic[ 128 ];
   char everyNodeFlag[ 128 ];
   char everyNodeTraffic[ 128 ];
   char specificNodeFlag[ 128 ];
   char specificNodeTraffic[ 128 ];
   long    SnrBSSIDTxSignalPkts;
   long    SnrBSSIDRxSignalPkts;
   long    SnrBSSIDSignalPkts;
   long   RadioIfIndex;
   long   SSIDindex;
   char   BSSIDmac[18];
   long  apFloodDetect;
   long  apSpoofDetect;
   long  apWKIVDectect;
   long  apClearAttackHistory;
   long  apClearIllegalHistory;
   long  apClearAttackStatistics;

   long haveSSIDEnabled;
   long haveSSIDHidden;
   long haveStaIsolate;
   long haveEAPAuthenSupport;
   long haveApMaxSimultUsers;
   long haveApBGmode;
   long haveApConnectUsers;
   long haveUsrReqJoinCount;
   long haveApRespUserCount;
   long haveUsrJoinSucCount;
   long haveApUsrTotalTime;
   long haveap80211stats;
   long haveapUtilResource;
   long haveVapFlag;
   long haveVapTraffic;
   long haveEveryNodeFlag;
   long haveEveryNodeTraffic;
   long haveSpecificNodeFlag;
   long haveSpecificNodeTraffic;
   long haveSnrBSSIDTxSignalPkts;
   long  haveSnrBSSIDRxSignalPkts;
   long  haveSnrBSSIDSignalPkts;
   long  haveRadioIfIndex;
   long  haveSSIDindex;
   long  haveBSSID;
   long  haveapFloodDetect;
   long  haveapSpoofDetect;
   long  haveapWKIVDectect;
   long  haveapClearAttackHistory;
   long  haveapClearIllegalHistory;
   long  haveapClearAttackStatistics;
}  nAc, *ac = &nAc;

static avList_t acList;


static struct seTbl_data {

   char  UID        [ SE_UID_LEN + 1 ];               // unique ID
   char  ifName     [ IFNAME_LEN + 1 ];               // ifName of card

   long  ifIndex; 
   
   long  apSecurityType;
   long  apwpaAuthMode;
   long  apwpaCipher;
   char  apwpaKeyValue [ 128 ];
   long  apwepAuthMode;
   long  apwepKeyType;
   long  apwepBitLevel;
   long  apwepKeyNum;
   char  apwepKeyValue[ 128 ];

   long haveApSecurityType ;
   long haveApwpaAuthMode;
   long haveApwpaCipher;
   long haveApwpaKeyValue;
   long haveApwepAuthMode; 
   long haveApwepKeyType ;
   long haveApwepBitLevel;
   long haveApwepKeyNum;
   long haveApwepKeyValue;
} nSe,*se = &nSe;

static avList_t seList;



static struct Ad_Tbl_data {

  char  UID        [ AD_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatMacAddrIndex;

  char  apStatMacAddrValue  [MACADDR_LEN+1];
  long  haveApStatMacAddrValue;

} nAd, *ad = &nAd;

static avList_t adList;


static struct Rp_Tbl_data {

  char  UID        [ RP_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatRxPowerIndex;
  long  apStatRxPowerValue;
  long  haveApStatRxPowerValue;

} nRp, *rp = &nRp;

static avList_t rpList;


static struct Ut_Tbl_data {

  char  UID        [ UP_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatUpTimeIndex;

  long apStatUpTimeValue;
  long  haveApStatUpTimeValue;

} nUt, *ut = &nUt;

static avList_t utList;


static struct Ar_Tbl_data {

  char  UID        [ AR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatTxSpeedIndex;

  long  apStatTxSpeedValue  ;
  long  haveApStatTxSpeedValue;

} nAr, *ar = &nAr;

static avList_t arList;



static struct Cr_Tbl_data {

  char  UID        [ CR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatRxSpeedIndex;

  long  apStatRxSpeedValue ;
  long  haveApStatRxSpeedValue;

} nCr, *cr = &nCr;

static avList_t crList;


static struct Sd_Tbl_data {

  char  UID        [ CR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStationSpeedIndex;

  long  apStationSpeedValue ;
  long  haveApStationSpeedValue;

} nSd, *sd = &nSd;

static avList_t sdList;




static struct Tx_Tbl_data {

  char  UID        [ TX_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatTxTrafficIndex;

  long  apStatTxTrafficValue ;
  long  haveApStatTxTrafficValue;

} nTx, *tx = &nTx;

static avList_t txList;


static struct Rx_Tbl_data {

  char  UID        [ RX_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatRxTrafficIndex;

  long apStatRxTrafficValue;
  long  haveApStatRxTrafficValue;

} nRx, *rx = &nRx;

static avList_t rxList;



static struct TR_Tbl_data {

  char  UID        [ TR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStationTrafficIndex;

  long  apStationTrafficValue ;
  long  haveApStationTafficValue;

} nTr, *tr = &nTr;

static avList_t trList;


static struct  Er_Tbl_data {

  char  UID        [ CR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatRxErrPksIndex;

  long  apStatRxErrPksValue ;
  long  haveApStatRxErrPksValue;

} nEr, *er = &nEr;

static avList_t erList;





static struct Rk_Tbl_data {

  char  UID        [ CR_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apStatRxSucPksIndex;

  long  apStatRxSucPksValue ;
  long  haveApStatRxSucPksValue;

} nRk, *rk = &nRk;

static avList_t  rkList;


static struct Sg_Tbl_data {

  char  UID        [ 9];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apTxSignalPktsIndex;

  long  apTxSignalPkts ;
  long  haveapTxSignalPkts;

} nSg, *sg = &nSg;

static avList_t  sgList;


static struct Sp_Tbl_data {

  char  UID        [9 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apRxSignalPktsIndex;

  long  apRxSignalPkts ;
  long  haveapRxSignalPkts;

} nSp, *sp = &nSp;

static avList_t  spList;


static struct Si_Tbl_data {

  char  UID        [9 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 

  long  apSignalPktsIndex;

  long  apSignalPkts ;
  long  haveapSignalPkts;

} nSi, *si = &nSi;

static avList_t  siList;


static struct Rc_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  
  long  ChanAutoSelectEnable;
  long  RadioChannelConfig;
  long  RadioChannelUsing;
  char TransmitSpeedConfig[SNMP_STR_LEN];
  long  MaxTxPwrLvl;
  long  PwrAttRange;
  long  AntennaGain;
  long  PowerMgmtEnable;
  long  MaxStationNumPermitted;

  long  haveChanAutoSelectEnable;
  long  haveRadioChannelConfig;
  long  haveRadioChannelUsing;
  long  haveTransmitSpeedConfig;
  long  haveMaxTxPwrLvl;
  long  havePwrAttRange;
  long  haveAntennaGain;
  long  havePowerMgmtEnable;
  long  haveMaxStationNumPermitted;
  
} nRc, *rc = &nRc;

static avList_t rcList;

static struct Wm_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  StaWMMAttrIndex;
  
  long  StaWMMAttr;
  long  haveStaWMMAttr;

} nWm, *wm = &nWm;

static avList_t wmList;




static struct Ip_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  StaIPAddressIndex;
  
  char  StaIPAddress[SNMP_STR_LEN];
  long  haveStaIPAddress;

} nIp, *ip = &nIp;

static avList_t ipList;



static struct Su_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  StaUplinkMaxRateIndex;
  
  long  StaUplinkMaxRate;
  long  haveStaUplinkMaxRate;

} nSu, *su = &nSu;

static avList_t suList;



static struct Sk_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  StaDwlinkMaxRateIndex;
  
  long  StaDwlinkMaxRate;
  long  haveStaDwlinkMaxRate;

} nSk, *sk = &nSk;

static avList_t  skList;



static struct Ps_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  StaPowerSaveModeIndex;
  
  long  StaPowerSaveMode;
  long  haveStaPowerSaveMode;

} nPs, *ps = &nPs;

static avList_t psList;


static struct Sn_Tbl_data {

  char  UID        [ DN_UID_LEN + 1 ];
  char  ifName     [ IFNAME_LEN + 1 ];

  long  ifIndex; 
  long  apStationInfoIndex;
  
  long  StaRadioMode;
  long  StaRadioChannel ;
  long  StaVlanId;
  char  StaSSIDName[SNMP_STR_LEN];
  long  StaAuthenMode;
  long  StaSecurityCiphers;
  
  
  long  haveStaRadioMode;
  long  haveStaRadioChannel;
  long  haveStaVlanId;
  long  haveStaSSIDName;
  long  haveStaAuthenMode;
  long  haveStaSecurityCiphers;

  
} nSn, *sn = &nSn;

static avList_t snList;




/* function declarations */
void init_stationAp(void);
FindVarMethod var_stationAp;
FindVarMethod var_apConfigTable;
FindVarMethod var_apSecurityConfigTable;
FindVarMethod var_apStatMacAddrTable;
FindVarMethod var_apStatRxPowerTable;
FindVarMethod var_apStatUpTimeTable;
FindVarMethod var_apStatTxSpeedTable;
FindVarMethod var_apStatRxSpeedTable;
FindVarMethod var_apStationSpeedTable;
FindVarMethod var_apStatTxTrafficTable;
FindVarMethod var_apStatRxTrafficTable;
FindVarMethod var_apStationTrafficTable;
FindVarMethod var_apStatRxErrPksTable;
FindVarMethod var_apStatRxSucPksTable;
FindVarMethod var_apTxSignalPktsTable;
FindVarMethod var_apRxSignalPktsTable;
FindVarMethod var_apSignalPktsTable;
FindVarMethod var_staWMMAttrTable;
FindVarMethod var_staIPAddressTable;
FindVarMethod var_staPowerSaveModeTable;
FindVarMethod var_staUplinkMaxRateTable;
FindVarMethod var_staDwlinkMaxRateTable;
FindVarMethod var_apStationInfoTable;
FindVarMethod var_apRadioChannelTable;
    WriteMethod write_SSIDEnabled;
    WriteMethod write_SSIDHidden;
    WriteMethod write_StaIsolate;
    WriteMethod write_EAPAuthenSupport;
    WriteMethod write_apMaxSimultUsers;
    WriteMethod write_apBGmode;
    WriteMethod write_vapFlag;
    WriteMethod write_vapTraffic;
    WriteMethod write_everyNodeFlag;
    WriteMethod write_everyNodeTraffic;
    WriteMethod write_specificNodeFlag;
    WriteMethod write_specificNodeTraffic;
    WriteMethod write_SSIDindex;
    WriteMethod write_apFloodDetectSwitch;
    WriteMethod write_apSpoofDetectSwitch;
    WriteMethod write_apWKIVDectectSwitch;
    WriteMethod write_apClearAttackHistory;
    WriteMethod write_apClearIllegalHistory;
    WriteMethod write_apClearAttackStatistics;
    WriteMethod write_apSecurityType;
    WriteMethod write_apwpaAuthMode;
    WriteMethod write_apwpaCipher;
    WriteMethod write_apwpaKeyValue;
    WriteMethod write_apwepAuthMode;
    WriteMethod write_apwepKeyType;
    WriteMethod write_apwepBitLevel;
    WriteMethod write_apwepKeyNum;
    WriteMethod write_apwepKeyValue;
    WriteMethod write_staUplinkMaxRateValue;
    WriteMethod write_staDwlinkMaxRateValue;
    WriteMethod write_ChanAutoSelectEnable;
    WriteMethod write_RadioChannelConfig;
    WriteMethod write_TransmitSpeedConfig;
	WriteMethod write_PowerMgmtEnable;
    WriteMethod write_MaxStationNumPermitted;
#endif /* STATIONAP_H */

